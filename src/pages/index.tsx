// React / next
import React, { useEffect } from "react";
import Head from "next/head";
import { ImCheckmark } from "react-icons/im";

// Components
import { Slideshow } from "../components/Slideshow/Slideshow";
import { Layout } from "../components/Layout/Layout";
import { Carousel } from "../components/Carousel/Carousel";
import { Card } from "../components/Card/Card";
import { TooltipIconButton } from "../components/TooltipIconButton/TooltipIconButton";

// Redux
import { see } from "../redux/slices/movie/actions/see";
import { fetchMovieData } from "../redux/slices/movie/actions/fetchMovieData";
import { fetchTvData } from "../redux/slices/tv/actions/fetchTvData";
import { unsee } from "../redux/slices/movie/actions/unsee";
import { Movie } from "../redux/slices/movie/types";

// Local files
import { useAppDispatch, useAppSelector } from "../hooks/hooks";
import getImageUrl from "../utils/getImageUrl";
import { movieGenres } from "../utils/constants/genreIds";
import { Tv } from "../redux/slices/tv/types";
import { watchTv } from "../redux/slices/tv/actions/watchTv";
import { unwatchTv } from "../redux/slices/tv/actions/unwatchTv";

export default function Home() {
  const dispatch = useAppDispatch();

  const { movies } = useAppSelector(state => state.movie);
  const { tv } = useAppSelector(state => state.tv);

  useEffect(() => {
    dispatch(fetchMovieData({ page: 1 }));
    dispatch(fetchTvData({ page: 1 }));
  }, []);

  const handleSee = (movie: Movie) => {
    dispatch(
      see({
        params: {
          tmdbId: movie.id.toString(),
          title: movie.title,
          posterPath: movie.backdrop_path,
        },
      })
    );
  };

  const handleUnsee = (movie: Movie) => {
    dispatch(unsee({ tmdbId: movie.id.toString() }));
  };

  const handleWatchTv = (media: Tv) => {
    dispatch(
      watchTv({
        params: {
          tmdbId: media.id.toString(),
          title: media.name,
          posterPath: media.backdrop_path,
        },
      })
    );
  };

  const handleUnwatchTv = (tv: Tv) => {
    dispatch(unwatchTv({ tmdbId: tv.id.toString() }));
  };

  return (
    <div>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Layout>
        <Slideshow slides={movies.popularMovies.slice(0, 5)} />
        <Carousel title="Popular Movies" href="/movie/popular">
          {movies.popularMovies.map(media => (
            <Card key={media.id}>
              <Card.CardImage
                src={getImageUrl(500, media.backdrop_path)}
                alt={media.title}
                isLoading={movies.loading}
              />
              <Card.CardTitle
                isLoading={movies.loading}
                href={`/movie/${media.id}`}
              >
                {media.title}
              </Card.CardTitle>
              <Card.CardSubtitle isLoading={movies.loading}>
                {media.genre_ids.map(id => movieGenres[id]).join(", ")}
              </Card.CardSubtitle>
              <Card.CardActionArea>
                <Card.CardSecondaryActions>
                  {media.seen ? (
                    <TooltipIconButton
                      icon={<ImCheckmark />}
                      variant="primary"
                      label="Unsee"
                      onClick={() => handleUnsee(media)}
                    />
                  ) : (
                    <TooltipIconButton
                      icon={<ImCheckmark />}
                      variant="solid"
                      label="Mark as seen"
                      onClick={() => handleSee(media)}
                    />
                  )}
                </Card.CardSecondaryActions>
              </Card.CardActionArea>
            </Card>
          ))}
        </Carousel>
        <Carousel title="Popular Tv" href="/tv/popular">
          {tv.popularTv.map(media => (
            <Card key={media.id}>
              <Card.CardImage
                src={getImageUrl(500, media.backdrop_path)}
                alt={media.name}
                isLoading={tv.loading}
              />
              <Card.CardTitle isLoading={tv.loading} href={`/tv/${media.id}`}>
                {media.name}
              </Card.CardTitle>
              <Card.CardSubtitle isLoading={tv.loading}>
                {media.genre_ids.map(id => movieGenres[id]).join(", ")}
              </Card.CardSubtitle>
              <Card.CardActionArea>
                <Card.CardSecondaryActions>
                  {media.seen ? (
                    <TooltipIconButton
                      icon={<ImCheckmark />}
                      variant="primary"
                      label="Unsee"
                      onClick={() => handleUnwatchTv(media)}
                    />
                  ) : (
                    <TooltipIconButton
                      icon={<ImCheckmark />}
                      variant="solid"
                      label="Mark as seen"
                      onClick={() => handleWatchTv(media)}
                    />
                  )}
                </Card.CardSecondaryActions>
              </Card.CardActionArea>
            </Card>
          ))}
        </Carousel>
      </Layout>
    </div>
  );
}
